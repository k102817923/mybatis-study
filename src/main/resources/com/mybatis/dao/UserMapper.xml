<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 绑定一个对应的Dao/Mapper接口 -->
<mapper namespace="com.mybatis.dao.UserMapper">
    <select id="getUserList" resultType="User">
        select * from user
    </select>

    <!-- 结果集映射 -->
    <resultMap id="UserMap" type="User">
        <!-- ID 主键 -->
        <!-- column 是数据库表的字段名，property 是对应实体类的属性名 -->
        <!-- 可以仅设置需要起别名的字段 -->
<!--        <id column="id" property="id"/>-->
<!--        <result column="name" property="name"/>-->
        <!-- 假设数据库中是 pwd，实体类中是 password -->
        <result column="pwd" property="password"/>
    </resultMap>

<!--    <select id="getUserById" resultMap="UserMap">-->
<!--        select * from user where id = #{id}-->
<!--    </select>-->

    <select id="getUserById" parameterType="int" resultType="User">
        select * from user where id = #{id}
    </select>

    <!-- 对象中的属性可以直接取出来 -->
    <insert id="create" parameterType="User">
        insert into user (id, name, pwd) values (#{id}, #{name}, #{pwd})
    </insert>

    <update id="update" parameterType="User">
        update user set name = #{name}, pwd = #{pwd} where id = #{id}
    </update>

    <delete id="delete" parameterType="int">
        delete from user where id = #{id}
    </delete>

    <!-- 在接口方法的参数前加 @Param 属性，Sql 编写时就可直接取 @Param 中设置的值，无需再单独设置参数类型-->
    <select id="getUserByNameAndPwd" resultType="User">
        select * from user where name = #{name} and pwd = #{pwd}
    </select>

    <select id="getUserByNameAndPwdV2" parameterType="map" resultType="User">
        select * from user where name = #{name} and pwd = #{pwd}
    </select>

    <select id="getUserByKeyword" resultType="User">
        select * from user where name like #{name}
    </select>

    <select id="getUserListByLimit" parameterType="map" resultType="User">
        select * from user limit #{startIndex}, #{pageSize}
    </select>

    <!-- 创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突 -->
<!--    <cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/>-->
    <!-- 使用第三方缓存 -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
</mapper>
